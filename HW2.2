def partition(arr, low, high):
    # Choose the last element as the pivot
    pivot = arr[high]
    
    # set index of smaller element
    i = low - 1
    
    # Traverse through all elements of the array
    for j in range(low, high):
        # If current element is smaller than or equal to the pivot
        if arr[j] < pivot:
            # Increment index of smaller element
            i += 1
            # Swap arr[i] and arr[j]
            arr[i], arr[j] = arr[j], arr[i]
    
    # Swap arr[i+1] and arr[high] (pivot)
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    
    # Return the partitioning index
    return i + 1

def quick_sort(arr, low, high):
    # Check if there are more than one element to sort
    if low < high:
        # pi is partitioning index, arr[pi] is now at right place
        pi = partition(arr, low, high)
        
        # Separately sort elements before partition and after partition
        quick_sort(arr, low, pi - 1)
        quick_sort(arr, pi + 1, high)


arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
# Call quick_sort function to sort the array
quick_sort(arr, 0, n - 1)
# Print the sorted array
print("Sorted array:", arr)
